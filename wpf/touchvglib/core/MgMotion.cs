/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace touchvg.core {

using System;
using System.Runtime.InteropServices;

public class MgMotion : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MgMotion(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(MgMotion obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~MgMotion() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          touchvgPINVOKE.delete_MgMotion(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public MgView view {
    set {
      touchvgPINVOKE.MgMotion_view_set(swigCPtr, MgView.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_view_get(swigCPtr);
      MgView ret = (cPtr == IntPtr.Zero) ? null : new MgView(cPtr, false);
      return ret;
    } 
  }

  public int gestureType {
    set {
      touchvgPINVOKE.MgMotion_gestureType_set(swigCPtr, value);
    } 
    get {
      int ret = touchvgPINVOKE.MgMotion_gestureType_get(swigCPtr);
      return ret;
    } 
  }

  public MgGestureState gestureState {
    set {
      touchvgPINVOKE.MgMotion_gestureState_set(swigCPtr, (int)value);
    } 
    get {
      MgGestureState ret = (MgGestureState)touchvgPINVOKE.MgMotion_gestureState_get(swigCPtr);
      return ret;
    } 
  }

  public bool pressDrag {
    set {
      touchvgPINVOKE.MgMotion_pressDrag_set(swigCPtr, value);
    } 
    get {
      bool ret = touchvgPINVOKE.MgMotion_pressDrag_get(swigCPtr);
      return ret;
    } 
  }

  public bool switchGesture {
    set {
      touchvgPINVOKE.MgMotion_switchGesture_set(swigCPtr, value);
    } 
    get {
      bool ret = touchvgPINVOKE.MgMotion_switchGesture_get(swigCPtr);
      return ret;
    } 
  }

  public Point2d startPt {
    set {
      touchvgPINVOKE.MgMotion_startPt_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_startPt_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d startPtM {
    set {
      touchvgPINVOKE.MgMotion_startPtM_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_startPtM_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d lastPt {
    set {
      touchvgPINVOKE.MgMotion_lastPt_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_lastPt_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d lastPtM {
    set {
      touchvgPINVOKE.MgMotion_lastPtM_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_lastPtM_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d point {
    set {
      touchvgPINVOKE.MgMotion_point_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_point_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d pointM {
    set {
      touchvgPINVOKE.MgMotion_pointM_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_pointM_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d startPt2 {
    set {
      touchvgPINVOKE.MgMotion_startPt2_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_startPt2_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d startPt2M {
    set {
      touchvgPINVOKE.MgMotion_startPt2M_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_startPt2M_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d point2 {
    set {
      touchvgPINVOKE.MgMotion_point2_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_point2_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public Point2d point2M {
    set {
      touchvgPINVOKE.MgMotion_point2M_set(swigCPtr, Point2d.getCPtr(value));
    } 
    get {
      IntPtr cPtr = touchvgPINVOKE.MgMotion_point2M_get(swigCPtr);
      Point2d ret = (cPtr == IntPtr.Zero) ? null : new Point2d(cPtr, false);
      return ret;
    } 
  }

  public float d2mgs {
    set {
      touchvgPINVOKE.MgMotion_d2mgs_set(swigCPtr, value);
    } 
    get {
      float ret = touchvgPINVOKE.MgMotion_d2mgs_get(swigCPtr);
      return ret;
    } 
  }

  public float d2m {
    set {
      touchvgPINVOKE.MgMotion_d2m_set(swigCPtr, value);
    } 
    get {
      float ret = touchvgPINVOKE.MgMotion_d2m_get(swigCPtr);
      return ret;
    } 
  }

  public MgMotion() : this(touchvgPINVOKE.new_MgMotion(), true) {
  }

  public bool dragging() {
    bool ret = touchvgPINVOKE.MgMotion_dragging(swigCPtr);
    return ret;
  }

  public MgCmdManager cmds() {
    IntPtr cPtr = touchvgPINVOKE.MgMotion_cmds(swigCPtr);
    MgCmdManager ret = (cPtr == IntPtr.Zero) ? null : new MgCmdManager(cPtr, false);
    return ret;
  }

  public bool toSelectCommand() {
    bool ret = touchvgPINVOKE.MgMotion_toSelectCommand(swigCPtr);
    return ret;
  }

  public Point2d startCenterM() {
    Point2d ret = new Point2d(touchvgPINVOKE.MgMotion_startCenterM(swigCPtr), true);
    return ret;
  }

  public Point2d centerM() {
    Point2d ret = new Point2d(touchvgPINVOKE.MgMotion_centerM(swigCPtr), true);
    return ret;
  }

  public float startDistanceM() {
    float ret = touchvgPINVOKE.MgMotion_startDistanceM(swigCPtr);
    return ret;
  }

  public float distanceM() {
    float ret = touchvgPINVOKE.MgMotion_distanceM(swigCPtr);
    return ret;
  }

  public float displayMmToModel(float mm, GiGraphics arg1) {
    float ret = touchvgPINVOKE.MgMotion_displayMmToModel__SWIG_0(swigCPtr, mm, GiGraphics.getCPtr(arg1));
    return ret;
  }

  public float displayMmToModel(float mm) {
    float ret = touchvgPINVOKE.MgMotion_displayMmToModel__SWIG_1(swigCPtr, mm);
    return ret;
  }

}

}
